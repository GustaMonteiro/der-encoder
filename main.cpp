#include "pch.h"
#include "make_buffer_string.h"
#include "der_encoder.h"

void test_encoding_primitive_integer()
{
    std::vector<std::pair<int, std::string>> tests{
        {5, "020105"},
        {127, "02017f"},
        {128, "02020080"},
        {300, "0202012c"},
        {-1, "0201ff"},
        {-3, "0201fd"},
        {-300, "0202fed4"},
        {0, "020100"},
        {128, "02020080"}};

    for (auto &[input, expected] : tests)
    {
        Der_Encoder encoder;
        encoder.encode_integer(input);

        std::string result = make_buffer_string(encoder.get_buffer());

        if (result != expected)
        {
            std::cout << "Input: " << input << "; expected: " << expected << "; got: " << result << std::endl;
            assert(result == expected);
        }
    }
}

void test_encoding_big_integers()
{
    std::vector<std::pair<std::vector<unsigned char>, std::string>> tests{
        {{5}, "020105"},
        {{127}, "02017f"},
        {{128}, "02020080"},
        {{0x01, 0x2c}, "0202012c"},
        {{0}, "020100"},
        {{128}, "02020080"},
        {{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "02080102030405060708"},
        {{0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "0209008102030405060708"},
        {std::vector<unsigned char>(127, 1), "027f01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"},
        {std::vector<unsigned char>(128, 1), "0281800101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"},
        {std::vector<unsigned char>(255, 1), "0281ff010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"},
        {std::vector<unsigned char}};

    for (auto &[input, expected] : tests)
    {
        Der_Encoder encoder;
        encoder.encode_integer(input);

        std::string result = make_buffer_string(encoder.get_buffer());

        if (result != expected)
        {
            std::cout << "expected: " << expected << "\ngot: " << result << std::endl
                      << std::endl;
            assert(result == expected);
        }
    }
}

void test_encoding_sequences()
{
    std::vector<std::pair<std::string, std::string>> tests = {
        {[]()
         {
             Der_Encoder encoder;

             encoder
                 .start_sequence()
                 .encode_integer(1)
                 .encode_integer(2)
                 .encode_integer(3)
                 .end_sequence();

             return make_buffer_string(encoder.get_buffer());
         }(),
         "3009020101020102020103"},

        {[]()
         {
             Der_Encoder encoder;

             encoder
                 .start_sequence()
                 .end_sequence();

             return make_buffer_string(encoder.get_buffer());
         }(),
         "3000"},

        {[]()
         {
             Der_Encoder encoder;

             encoder
                 .start_sequence()
                 .start_sequence()
                 .encode_integer(5)
                 .end_sequence()
                 .encode_integer(10)
                 .end_sequence();

             return make_buffer_string(encoder.get_buffer());
         }(),
         "3008300302010502010a"},

        {[]()
         {
             Der_Encoder encoder;

             encoder
                 .start_sequence()
                 .encode_integer(std::vector<unsigned char>(127, 1))
                 .encode_integer(std::vector<unsigned char>(128, 1))
                 .encode_integer(std::vector<unsigned char>(255, 1))
                 .encode_integer(std::vector<unsigned char>(256, 1))
                 .end_sequence();

             return make_buffer_string(encoder.get_buffer());
         }(),
         "3082030a027fff}

    };

    for (auto &[result, expected] : tests)
    {
        if (result != expected)
        {
            std::cout << "expected: " << expected << "\ngot: " << result << std::endl
                      << std::endl;
            assert(result == expected);
        }
    }
}

void run_all_asserts()
{
    test_make_buffer_string();
    test_encoding_primitive_integer();
    test_encoding_big_integers();
    test_encoding_sequences();

    std::cout << "All tests ok!\n";
}

int main()
{
    run_all_asserts();
}
